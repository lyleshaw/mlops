// Code generated by hertz generator.

package service

import (
	"context"
	"github.com/bytedance/gopkg/util/logger"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/lyleshaw/mlops/biz/dal/mysql"
	model "github.com/lyleshaw/mlops/biz/model/orm_gen"
	"github.com/lyleshaw/mlops/biz/model/service"
	"github.com/lyleshaw/mlops/biz/mw"
	"github.com/lyleshaw/mlops/pkg/constants"
	"net/http"
)

// Register .
// @router /api/v1/user/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req service.RegisterReq
	err = c.BindAndValidate(&req)
	if err != nil {
		logger.Errorf("register bind error: %v", err)
		c.String(400, err.Error())
		return
	}

	if req.Code != constants.EmailCode[req.Email] {
		logger.Errorf("register code error: %v", err)
		c.String(400, "code error")
		return
	}

	u, err := mysql.CreateUser(ctx, req.Username, req.Email, req.Password)
	if err != nil {
		logger.Errorf("register create user error: %v", err)
		c.String(500, "internal server error")
		return
	}
	resp := &service.UserResp{
		Code:    0,
		Message: "success",
		Data: &service.User{
			UserID:   u.UserID,
			Username: u.UserName,
			Email:    u.Email,
			Avatar:   u.Avatar,
			IsActive: u.IsActive,
			IsAdmin:  u.IsAdmin,
			UpdateAt: u.UpdateAt.Format(constants.TimeFormat),
			CreateAt: u.CreateAt.Format(constants.TimeFormat),
		},
	}
	c.JSON(200, resp)
}

// AllUser .
// @router /api/v1/user/all [GET]
func AllUser(ctx context.Context, c *app.RequestContext) {
	var req service.AllUserReq
	err := c.BindAndValidate(&req)
	if err != nil {
		logger.Errorf("all user bind error: %v", err)
		c.String(400, err.Error())
		return
	}

	user, exists := c.Get(mw.IdentityKey)
	if exists != true {
		c.String(401, "unauthorized")
		return
	}
	logger.Infof("User %v logged in AllUser", user.(*model.User).Email)
	if !user.(*model.User).IsAdmin {
		c.String(http.StatusForbidden, "no permission")
		return
	}

	users, err := mysql.GetAllUsers(ctx)
	if err != nil {
		logger.Errorf("all user get all users error: %v", err)
		c.String(500, "internal server error")
		return
	}

	// convert []*model.User to []*service.User
	var respUsers []*service.User
	for _, u := range users {
		respUsers = append(respUsers, &service.User{
			UserID:   u.UserID,
			Username: u.UserName,
			Email:    u.Email,
			Avatar:   u.Avatar,
			IsActive: u.IsActive,
			IsAdmin:  u.IsAdmin,
			UpdateAt: u.UpdateAt.Format(constants.TimeFormat),
			CreateAt: u.CreateAt.Format(constants.TimeFormat),
		})
	}

	resp := &service.UserListResp{
		Code:    0,
		Message: "success",
		Data:    respUsers,
	}
	c.JSON(200, resp)
}

// DeleteUser .
// @router /api/v1/user [DELETE]
func DeleteUser(ctx context.Context, c *app.RequestContext) {
	var req service.DeleteUserReq
	err := c.BindAndValidate(&req)
	if err != nil {
		logger.Errorf("delete user bind error: %v", err)
		c.String(400, err.Error())
		return
	}

	user, exists := c.Get(mw.IdentityKey)
	if exists != true {
		c.String(401, "unauthorized")
		return
	}
	logger.Infof("User %v logged in DeleteUser", user.(*model.User).Email)
	if !user.(*model.User).IsAdmin {
		c.String(http.StatusForbidden, "no permission")
		return
	}

	err = mysql.DeleteUserByID(ctx, int(req.UserID))
	if err != nil {
		logger.Errorf("delete user delete user error: %v", err)
		c.String(500, "internal server error")
		return
	}
	resp := &service.BaseResp{
		Code:    0,
		Message: "success",
	}
	c.JSON(200, resp)
}

// GetUser .
// @router /api/v1/user/me [GET]
func GetUser(ctx context.Context, c *app.RequestContext) {
	user, exists := c.Get(mw.IdentityKey)
	if exists != true {
		c.String(401, "unauthorized")
		return
	}
	logger.Infof("User %v logged in GetUser", user.(*model.User).Email)
	resp := &service.UserResp{
		Code:    0,
		Message: "success",
		Data: &service.User{
			UserID:   user.(*model.User).UserID,
			Username: user.(*model.User).UserName,
			Email:    user.(*model.User).Email,
			Avatar:   user.(*model.User).Avatar,
			IsActive: user.(*model.User).IsActive,
			IsAdmin:  user.(*model.User).IsAdmin,
			UpdateAt: user.(*model.User).UpdateAt.Format(constants.TimeFormat),
			CreateAt: user.(*model.User).CreateAt.Format(constants.TimeFormat),
		},
	}

	c.JSON(200, resp)
}
